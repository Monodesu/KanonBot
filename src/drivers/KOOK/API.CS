using System.IO;
using KanonBot.Message;
using Newtonsoft.Json.Linq;

namespace KanonBot.Drivers;

public partial class Kook
{
    // API 部分 * 包装 Driver
    public class API
    {
        readonly string AuthToken;
        public static readonly string EndPoint = "https://www.kookapp.cn/api/v3";

        public API(string authToken)
        {
            this.AuthToken = $"Bot {authToken}";
        }

        private IFlurlRequest Http()
        {
            return EndPoint.WithHeader("Authorization", this.AuthToken);
        }

        public async Task<string> GetWebsocketUrl()
        {
            var res = await this.Http()
                .AppendPathSegments("gateway", "index")
                .SetQueryParam("compress", 0)
                .GetJsonAsync<JObject>();

            if (((int)res["code"]!) != 0)
            {
                throw new Exception(
                    $"无法获取KOOK WebSocket地址，Code：{res["code"]}，Message：{res["message"]}"
                );
            }

            return res["data"]!["url"]!.ToString();
        }

        /// <summary>
        /// 传入文件数据与文件名，如无文件名则会随机生成字符串
        /// </summary>
        /// <param name="data"></param>
        /// <param name="filename"></param>
        /// <returns>url</returns>
        async public Task<string> CreateAsset(Stream data, string? filename = null)
        {
            var res = await this.Http()
                .AppendPathSegments("asset", "create")
                .SetQueryParam("compress", 0)
                .PostMultipartAsync(
                    mp => mp.AddFile("file", data, filename ?? Utils.RandomStr(10))
                );
            var j = await res.GetJsonAsync<JObject>();
            return j["data"]!["url"]!.ToString();
        }

        public async Task SendPrivateMessage(
            string userID,
            Chain msgChain,
            Guid? QuotedMessageId = null
        )
        {
            var messages = await Message.Build(this, msgChain);
            foreach (var msg in messages)
            {
                msg.TargetId = userID;
                msg.QuotedMessageId = QuotedMessageId;
                await this.Http().AppendPathSegments("direct-message", "create").PostJsonAsync(msg);
            }
        }

        public async Task SendChannelMessage(
            string channelID,
            Chain msgChain,
            Guid? QuotedMessageId = null,
            string? TempMsgTargetId = null
        )
        {
            var messages = await Message.Build(this, msgChain);
            if (messages.Count > 0)
                messages[0].QuotedMessageId = QuotedMessageId;
            foreach (var msg in messages)
            {
                msg.TargetId = channelID;
                msg.EphemeralUserId = TempMsgTargetId;
                await this.Http().AppendPathSegments("message", "create").PostJsonAsync(msg);
            }
        }
    }
}
